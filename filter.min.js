const impermaxFilter=(e,r)=>{const l=[];document.querySelectorAll(".pairs-table-row").forEach(e=>l.push(e));const o=l.map(e=>e.querySelectorAll(".col")[2]).filter(e=>e).map(e=>[e.querySelectorAll("div")[0].innerHTML,e.querySelectorAll("div")[1].innerHTML].map(e=>parseFloat(e.split("%")[0])/100)),t=l.map(e=>e.querySelectorAll(".col")[3]).filter(e=>e).map(e=>[e.querySelectorAll("div")[0].innerHTML,e.querySelectorAll("div")[1].innerHTML].map(e=>parseFloat(e.split("%")[0])/100)),a=l.map(e=>e.querySelectorAll(".col-5 .percentage")).filter(e=>e).map(e=>parseFloat(e[0].innerHTML.split("%")[0])/100),p=l.map(e=>e.querySelector(".col-7 .symbols").innerHTML),c=l.map(e=>e.querySelector(".col-7 .amm-label").innerHTML),i=l.map(e=>e.href);return p.map((e,r)=>e.split("/").map((e,l)=>({token:e,pair:p[r],source:c[r],supply:o[r][l],borrow:t[r][l],farm:a[r],href:i[r]}))).reduce((e,r)=>[...e,...r],[]).filter(r=>e.includes(r.token)).sort((e,l)=>"borrow"==r?e[r]-l[r]:l[r]-e[r])};
